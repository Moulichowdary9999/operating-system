1st 

#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    printf("Hello from the new thread!\n");
    return NULL;
}

int main() {
    pthread_t thread_id;
    // Create a new thread
    pthread_create(&thread_id, NULL, thread_function, NULL);
    printf("Thread created successfully.\n");
    pthread_exit(NULL); // Wait for the new thread to finish
}



2nd 


#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    printf("Hello from the new thread!\n");
    return NULL;
}

int main() {
    pthread_t thread_id;
    // Create a new thread
    pthread_create(&thread_id, NULL, thread_function, NULL);
    printf("Thread created successfully.\n");
    // Wait for the new thread to finish
    pthread_join(thread_id, NULL);
    printf("Thread joined successfully.\n");
    pthread_exit(NULL);
}



3rd



#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    pthread_t current_thread = pthread_self();
    pthread_t *thread_id = (pthread_t *)arg;
    if (pthread_equal(current_thread, *thread_id)) {
        printf("The threads are equal.\n");
    } else {
        printf("The threads are not equal.\n");
    }
    return NULL;
}

int main() {
    pthread_t thread_id;
    // Create a new thread
    pthread_create(&thread_id, NULL, thread_function, (void *)&thread_id);
    pthread_exit(NULL);
}


4th 



#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    printf("Hello from the new thread!\n");
    // Exit the thread
    pthread_exit(NULL);
}

int main() {
    pthread_t thread_id;
    // Create a new thread
    pthread_create(&thread_id, NULL, thread_function, NULL);
    printf("Thread created successfully.\n");
    pthread_exit(NULL); // Wait for the new thread to finish
}

