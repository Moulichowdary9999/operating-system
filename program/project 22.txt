#include <stdio.h>

#define MAX_BLOCKS 100
#define MAX_JOBS 100
#define INF 999999

// Structure to represent memory block
struct MemoryBlock {
    int size;
    int allocated;
};

// Structure to represent job
struct Job {
    int size;
    int allocated_block;
};

// Function to allocate memory using best fit algorithm
void bestFit(struct MemoryBlock blocks[], int m, struct Job jobs[], int n) {
    for (int i = 0; i < n; i++) {
        int best_idx = -1;
        int min_diff = INF;
        for (int j = 0; j < m; j++) {
            if (blocks[j].allocated == 0 && blocks[j].size >= jobs[i].size) {
                int diff = blocks[j].size - jobs[i].size;
                if (diff < min_diff) {
                    min_diff = diff;
                    best_idx = j;
                }
            }
        }
        if (best_idx != -1) {
            blocks[best_idx].allocated = 1;
            jobs[i].allocated_block = best_idx;
        }
    }
}

int main() {
    int m, n; // Number of memory blocks and jobs
    struct MemoryBlock blocks[MAX_BLOCKS];
    struct Job jobs[MAX_JOBS];

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the sizes of memory blocks: ");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blocks[i].size);
        blocks[i].allocated = 0;
    }

    printf("Enter the number of jobs: ");
    scanf("%d", &n);

    printf("Enter the sizes of jobs: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &jobs[i].size);
        jobs[i].allocated_block = -1;
    }

    bestFit(blocks, m, jobs, n);

    printf("\nJob\tAllocated Block\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t", i + 1);
        if (jobs[i].allocated_block != -1) {
            printf("%d\n", jobs[i].allocated_block + 1);
        } else {
            printf("Not allocated\n");
        }
    }

    return 0;
}

