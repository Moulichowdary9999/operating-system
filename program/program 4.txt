





(4TH QUESTION)

#include <stdio.h>
#include <limits.h>

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int remaining_time; // Remaining burst time
} Process;

// Function to find the process with the smallest remaining burst time
int findShortestJob(Process processes[], int n, int current_time) {
    int shortest_job_index = -1;
    int shortest_job_time = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].remaining_time < shortest_job_time && processes[i].remaining_time > 0) {
            shortest_job_index = i;
            shortest_job_time = processes[i].remaining_time;
        }
    }

    return shortest_job_index;
}

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        // Find the process with the smallest remaining burst time
        int shortest_job_index = findShortestJob(processes, n, current_time);
        
        if (shortest_job_index == -1) {
            break;
        }

        // Waiting time for current process is the difference between current time and arrival time
        int waiting_time = current_time - processes[shortest_job_index].arrival_time;
        
        total_waiting_time += waiting_time;

        // Update current time by adding burst time of current process
        current_time += processes[shortest_job_index].remaining_time;

        // Reduce remaining time of the current process
        processes[shortest_job_index].remaining_time = 0;
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}










