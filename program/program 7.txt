

(7TH QUESTION)

#include <stdio.h>
#include <stdlib.h>

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int completion_time; // Completion time
    int turnaround_time; // Turnaround time
    int waiting_time;   // Waiting time
    int executed;       // Flag to mark if the process has been executed
} Process;

// Function to compare processes based on their burst time
int compare(const void *a, const void *b) {
    return ((Process *)a)->burst_time - ((Process *)b)->burst_time;
}

// Function to calculate completion time, turnaround time, and waiting time
void calculateTimes(Process processes[], int n) {
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        current_time += processes[i].burst_time;
        processes[i].completion_time = current_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].executed = 0;
    }

    // Sort processes based on burst time
    qsort(processes, n, sizeof(Process), compare);

    // Calculate completion time, turnaround time, and waiting time
    calculateTimes(processes, n);

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}







