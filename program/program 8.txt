

(8TH QUESTION)

#include <stdio.h>

#define MAX_PROCESSES 10

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int remaining_time; // Remaining burst time
} Process;

// Function to simulate Round Robin scheduling algorithm
void roundRobin(Process processes[], int n, int quantum) {
    int remaining_processes = n;
    int current_time = 0;
    int completed_processes = 0;

    printf("Gantt Chart:\n");
    printf("0 ");

    while (completed_processes < n) {
        int flag = 0; // Flag to indicate if any process has been executed in current time slice

        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                flag = 1;

                if (processes[i].remaining_time > quantum) {
                    printf("| P%d | %d ", processes[i].pid, current_time + quantum);
                    current_time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    printf("| P%d | %d ", processes[i].pid, current_time + processes[i].remaining_time);
                    current_time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    processes[i].arrival_time = -1; // Mark process as completed
                    completed_processes++;
                }
            }
        }

        if (!flag) {
            printf("| IDLE | %d ", current_time); // If no process is executing, print IDLE
            current_time++; // Increment time in case of IDLE
        }
    }

    printf("\n");
}

int main() {
    int n, quantum;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESSES) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    if (quantum <= 0) {
        printf("Invalid time quantum.\n");
        return 1;
    }

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("\nRound Robin Scheduling:\n");
    roundRobin(processes, n, quantum);

    return 0;
}






