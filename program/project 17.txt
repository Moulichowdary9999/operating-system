#include <stdio.h>

// Number of processes
#define P 5

// Number of resources
#define R 3

// Function to find the need of each process
void calculateNeed(int need[P][R], int max[P][R], int allocation[P][R])
{
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - allocation[i][j];
}

// Function to find whether the system is in a safe state or not
int isSafe(int processes[], int available[], int max[][R], int allocation[][R])
{
    int need[P][R];
    calculateNeed(need, max, allocation);

    int finish[P] = {0};

    int work[R];
    for (int i = 0; i < R; i++)
        work[i] = available[i];

    int safeSeq[P];
    int count = 0;

    while (count < P)
    {
        int found = 0;
        for (int p = 0; p < P; p++)
        {
            if (finish[p] == 0)
            {
                int j;
                for (j = 0; j < R; j++)
                    if (need[p][j] > work[j])
                        break;

                if (j == R)
                {
                    for (int k = 0; k < R; k++)
                        work[k] += allocation[p][k];

                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = 1;
                }
            }
        }

        if (found == 0)
        {
            printf("System is not in safe state\n");
            return 0;
        }
    }

    printf("System is in safe state.\nSafe sequence is: ");
    for (int i = 0; i < P; i++)
        printf("%d ", safeSeq[i]);
    printf("\n");

    return 1;
}

// Function to simulate Banker's algorithm
void bankerAlgorithm(int processes[], int available[], int max[][R], int allocation[][R])
{
    if (isSafe(processes, available, max, allocation))
    {
        printf("Executing processes...\n");
        // Code to execute processes goes here
    }
}

int main()
{
    int processes[] = {0, 1, 2, 3, 4};

    // Available instances of resources
    int available[] = {3, 3, 2};

    // Maximum R that can be allocated to processes
    int max[P][R] = {{7, 5, 3},
                     {3, 2, 2},
                     {9, 0, 2},
                     {2, 2, 2},
                     {4, 3, 3}};

    // Resources allocated to processes
    int allocation[P][R] = {{0, 1, 0},
                            {2, 0, 0},
                            {3, 0, 2},
                            {2, 1, 1},
                            {0, 0, 2}};

    bankerAlgorithm(processes, available, max, allocation);

    return 0;
}

